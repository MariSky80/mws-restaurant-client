{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","resources/js/dbhelper.js","resources/js/main.js"],"names":[],"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","file":"bundle_main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","const idb = require('idb');\r\nconst IDB_DB = 'restaurant-db';\r\nconst IDB_RESTAURANTS = 'restaurants';\r\nconst IDB_PENDING_RESTAURANTS = 'pending_restaurants';\r\nconst IDB_REVIEWS = 'reviews';\r\nconst IDB_PENDING_REVIEWS = 'pending_reviews';\r\nlet tagName = '';\r\n\r\n /**\r\n  * @description  Common database helper functions.\r\n  * @constructor\r\n  */\r\nclass DBHelper {\r\n /**\r\n  * @description  Database URL. Change this to restaurants.json file location on your server.\r\n  * @constructor\r\n  */\r\n  static get RESTAURANTS_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * @description  Database URL. Change this to restaurants.json file location on your server.\r\n   * @constructor\r\n   */\r\n   static get REVIEWS_URL() {\r\n     const port = 1337 // Change this to your server port\r\n     return `http://localhost:${port}/reviews`;\r\n   }\r\n\r\n\r\n  /**\r\n   * @description  Open database.\r\n   * @constructor\r\n   */\r\n  static openIndexedDB() {\r\n    // If the browser doesn't support service worker,\r\n    // we don't care about having a database\r\n    if (!navigator.serviceWorker) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this.dbPromise = idb.open(IDB_DB, 2, function (upgradeDb) {\r\n      switch (upgradeDb.oldVersion) {\r\n        case 0:\r\n        case 1:\r\n        case 2:\r\n          const storeRestaurant = upgradeDb.createObjectStore(IDB_RESTAURANTS, {\r\n            keyPath: 'id'\r\n          });\r\n          storeRestaurant.createIndex('by-id', 'id', { unique: true });\r\n\r\n          const storeReviews = upgradeDb.createObjectStore(IDB_REVIEWS, {\r\n            keyPath: 'id'\r\n          });\r\n          //storeReviews.createIndex('by-id', 'id', { unique: true });\r\n          storeReviews.createIndex('by-restaurant-id', 'restaurant_id');\r\n\r\n          const pendingRestaurants = upgradeDb.createObjectStore(IDB_PENDING_RESTAURANTS, {\r\n            keyPath: 'id'\r\n          });\r\n          pendingRestaurants.createIndex('by-id', 'id', {unique:true});\r\n\r\n          const pendingReviews = upgradeDb.createObjectStore(IDB_PENDING_REVIEWS, {\r\n            keyPath:'id', autoIncrement:true\r\n          });\r\n          pendingReviews.createIndex('by-id', 'id', {unique:true});\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Save data restaurant.\r\n   * @constructor\r\n   * @param {object} Object list - Object like restaurant, reveiw, ...\r\n   */\r\n  static storeIndexedDB(table, objects) {\r\n    this.dbPromise.then(function (db) {\r\n      if(!db) return;\r\n\r\n      let tx = db.transaction(table, 'readwrite');\r\n      const store = tx.objectStore(table);\r\n      if (Array.isArray(objects)) {\r\n        objects.forEach(function(object){\r\n          store.put(object);\r\n        });\r\n      } else {\r\n        store.put(objects);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Get a collection of objects from indexedDB.\r\n   * @constructor\r\n   */\r\n  static getStoredObjects(table) {\r\n    return this.dbPromise.then(function(db) {\r\n      if(!db) return;\r\n      const store = db.transaction(table).objectStore(table);\r\n      return store.getAll();\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Get object from indexedDB by index\r\n   * @constructor {int} id - Restaurant id\r\n   */\r\n  static getStoredObjectById(table, idx, id) {\r\n    return this.dbPromise.then(function(db) {\r\n      if(!db) return;\r\n\r\n      const store = db.transaction(table).objectStore(table);\r\n      const indexId = store.index(idx);\r\n      return indexId.getAll(id);\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all restaurants.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.RESTAURANTS_URL)\r\n      .then(response => response.json())\r\n      .then(restaurants => {\r\n        DBHelper.storeIndexedDB(IDB_RESTAURANTS, restaurants);\r\n        callback(null, restaurants);\r\n      })\r\n      .catch(error => {\r\n        DBHelper.getStoredObjects(IDB_RESTAURANTS)\r\n        .then((storedRestaurants) => {\r\n          callback(null, storedRestaurants);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch a restaurant by its ID.\r\n  * @constructor\r\n  * @param {int} id - Restaurant identifier.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.RESTAURANTS_URL}/${id}`)\r\n      .then(response => response.json())\r\n      .then(restaurant => {\r\n        DBHelper.storeIndexedDB(IDB_RESTAURANTS, restaurant);\r\n        callback(null, restaurant);\r\n      })\r\n      .catch(error => {\r\n        DBHelper.getStoredObjectById(IDB_RESTAURANTS, 'by-id' ,id)\r\n        .then((storedRestaurant) => {\r\n          callback(null, storedRestaurant);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a cuisine type with proper error handling.\r\n  * @constructor\r\n  * @param {string} cuisine - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a neighborhood with proper error handling.\r\n  * @constructor\r\n  * @param {string} neighborhood - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n  * @constructor\r\n  * @param {string} cuisine - Cuisine selected.\r\n  * @param {string} neighborhood - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all neighborhoods with proper error handling.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all cuisines with proper error handling.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n\r\n  /**\r\n  * @description  Fetch all reviews.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchReviews(callback) {\r\n    fetch(DBHelper.REVIEWS_URL)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n        DBHelper.storeIndexedDB(IDB_REVIEWS, reviews);\r\n        callback(null, reviews);\r\n      })\r\n      .catch(error => {\r\n        DBHelper.getStoredObjects(IDB_REVIEWS)\r\n        .then((storedReviews) => {\r\n          callback(null, storedReviews);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Fetch a review by its ID.\r\n   * @constructor\r\n   * @param {int} id - Reviews identifier.\r\n   * @param {function} callback - Callback function.\r\n   */\r\n   static fetchReviewsById(id, callback) {\r\n     fetch(`${DBHelper.REVIEWS_URL}/${id}`)\r\n       .then(response => response.json())\r\n       .then(review => {\r\n         DBHelper.storeIndexedDB(IDB_REVIEWS, review);\r\n         callback(null, review)\r\n       })\r\n       .catch(error => {\r\n         DBHelper.getStoredObjectById(IDB_REVIEWS, 'by-id', id)\r\n         .then((storedReview) => {\r\n           callback(null, storedReview);\r\n         }).catch(error => {\r\n           callback(error, null);\r\n         })\r\n       });\r\n   }\r\n\r\n\r\n /**\r\n  * @description  Fetch all restaurant reviews by restaurant ID.\r\n  * @constructor\r\n  * @param {int} id - Restaurant identifier.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchReviewsByRestId(id, callback) {\r\n    fetch(`${DBHelper.REVIEWS_URL}/?restaurant_id=${id}`)\r\n      .then(response => response.json())\r\n      .then(reviews => {\r\n        DBHelper.storeIndexedDB(IDB_REVIEWS, reviews);\r\n        callback(null, reviews)\r\n      })\r\n      .catch(error => {\r\n        DBHelper.getStoredObjectById(IDB_REVIEWS, 'by-restaurant-id', id)\r\n        .then((storedReviews) => {\r\n          callback(null, storedReviews);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Send review to server and stores it at database.\r\n   * @constructor\r\n   * @param {object} review - Reviwe object.\r\n   * @param {function} callback - Callback function.\r\n   */\r\n  static postReview(review, callback) {\r\n    fetch(DBHelper.REVIEWS_URL,\r\n      {\r\n        method:'post',\r\n        body:review\r\n      })\r\n      .then(response => response.json())\r\n      .then(review => {\r\n        DBHelper.storeIndexedDB(IDB_REVIEWS, review);\r\n        callback(null, review);\r\n      })\r\n      .catch(error => {\r\n        //Error sending review to server.\r\n        DBHelper.tagName = 'review';\r\n        DBHelper.addSyncServiceWorker();\r\n        DBHelper.storeIndexedDB(IDB_REVIEWS, review);\r\n        DBHelper.storeIndexedDB(IDB_PENDING_REVIEWS, JSON.parse(review));\r\n        callback(null, review);\r\n      });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Send request favorite/unfavorite to server and changes at database.\r\n   * @constructor\r\n   * @param {int} id - Restaurant identifier.\r\n   * @param {boolean} favorite - True to mark as favorite, otherwise false.\r\n   * @param {function} callback - Callback function.\r\n   */\r\n  static putFavorite(id, favorite, callback) {\r\n    fetch(`${DBHelper.RESTAURANTS_URL}/${id}/?is_favorite=${favorite}`,\r\n      {\r\n        method:'put',\r\n        body:favorite\r\n      })\r\n      .then(response => response.json())\r\n      .then(favorite => {\r\n        DBHelper.storeIndexedDB(IDB_RESTAURANTS, favorite);\r\n        callback(null, favorite);\r\n      })\r\n      .catch(error => {\r\n        //Error sending favorite/unfavorite to server.\r\n        DBHelper.tagName = 'favorite';\r\n        DBHelper.addSyncServiceWorker();\r\n        DBHelper.storeIndexedDB(IDB_RESTAURANTS, favorite);\r\n        DBHelper.storeIndexedDB(IDB_PENDING_RESTAURANTS, JSON.parse(favorite));\r\n        callback(null, favorite);\r\n      });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Restaurant page URL.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant information.\r\n  */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n\r\n /**\r\n  * @description Restaurant image URL.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant information.\r\n  */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let photograph = ('photograph' in restaurant) ? restaurant.photograph : restaurant.id;\r\n    return (`./img/${photograph}`);\r\n  }\r\n\r\n\r\n /**\r\n  * @description Map marker for a restaurant.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant coords and name.\r\n  * @param {object} map - Google map object.\r\n  */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n\r\n /**\r\n  * @description Register ServiceWorker.\r\n  * @constructor\r\n  */\r\n  static registerServiceWorker() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.register('sw.js')\r\n        .then((reg) => {\r\n          console.log(`Service Worker registration successful. Its scope is ${reg.scope} `);\r\n        }).catch((error) => {\r\n          console.log(`Service Worker registration error: ${error}`);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Register ServiceWorker.\r\n   * @constructor\r\n   */\r\n   static addSyncServiceWorker() {\r\n     navigator.serviceWorker.ready.then(function(registration) {\r\n       registration.sync.register(DBHelper.tagName).then(function() {\r\n         console.log(`Registration ${DBHelper.tagName} succeeded.`);\r\n       }, function() {\r\n         console.error(`Registration ${DBHelper.tagName} failed!`);\r\n       });\r\n     });\r\n   }\r\n\r\n\r\n  /**\r\n    * @description Show or hide message when Service Worker is online o offline.\r\n    * @constructor\r\n    * @param {string} offline - String detected.\r\n    * @param {event} event - Event called\r\n    */\r\n    static showMessage(type) {\r\n      let message = document.getElementById('sw-message');\r\n      switch(type) {\r\n        case 'online':\r\n          message.style.display = 'none';\r\n          break;\r\n        case 'offline':\r\n          message.style.display = 'block';\r\n          break;\r\n      }\r\n    }\r\n\r\n}\r\nmodule.exports = DBHelper;\r\n","const DBHelper = require('./dbhelper');\r\nlet restaurants,\r\n  neighborhoods,\r\n  cuisines;\r\nlet map;\r\nlet markers = [];\r\nlet staticMap = false;\r\nlet is_favorite;\r\n\r\n/**\r\n  * @description Call functions when DOM content is loaded\r\n  * @constructor\r\n  * @param {string} DOMContentLoaded - String detected.\r\n  * @param {event} event - Event called\r\n  */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  DBHelper.registerServiceWorker();\r\n  DBHelper.openIndexedDB();\r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n\r\n/**\r\n  * @description Call functions when window is resized\r\n  * @constructor\r\n  * @param {string} resize - String detected.\r\n  * @param {event} event - Event called\r\n  */\r\nwindow.addEventListener('resize', (event) =>{\r\n  initMap();\r\n});\r\n\r\n\r\n/**\r\n  * @description Call functions when service worker is online.\r\n  * @constructor\r\n  * @param {string} online - String detected.\r\n  * @param {event} event - Event called\r\n  */\r\n window.addEventListener('online',(event)=>{\r\n   event.preventDefault();\r\n   DBHelper.showMessage(event.type);\r\n });\r\n\r\n\r\n /**\r\n   * @description Call functions when service worker is offline.\r\n   * @constructor\r\n   * @param {string} offline - String detected.\r\n   * @param {event} event - Event called\r\n   */\r\n window.addEventListener('offline',(event)=>{\r\n   event.preventDefault();\r\n   DBHelper.showMessage(event.type);\r\n });\r\n\r\n\r\n/**\r\n * @description  Fetch all neighborhoods and set their HTML.\r\n * @constructor\r\n * @param {object} error - error object.\r\n * @param {object} neighborhoods - neighborhood list.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n/**\r\n* @description  Set neighborhoods HTML.\r\n* @constructor\r\n* @param {object} neighborhoods - neighborhood list.\r\n*/\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n\r\n/**\r\n* @description  fetch all cuisines and set their HTML.\r\n* @constructor\r\n* @param {object} error - error object.\r\n* @param {object} cuisines - cuisines list.\r\n*/\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n\r\n/**\r\n* @description  Set cuisines HTML.\r\n* @constructor\r\n* @param {object} cuisines - cuisines list.\r\n*/\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n\r\n/**\r\n* @description  Update page and map for current restaurants.\r\n* @constructor\r\n*/\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n\r\n/**\r\n* @description  Clear current restaurants, their HTML and remove their map markers.\r\n* @constructor\r\n* @param {object} restaurants - restaurants list.\r\n*/\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if(self.markers !== undefined) {\r\n    self.markers.forEach(m => m.setMap(null));\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n\r\n}\r\n\r\n\r\n/**\r\n* @description Create all restaurants HTML and add them to the webpage.\r\n* @constructor\r\n* @param {object} restaurants - restaurants created.\r\n*/\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n\r\n/**\r\n* @description Create restaurant HTML.\r\n* @constructor\r\n* @param {object} restaurant - restaurants object.\r\n*/\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const img = DBHelper.imageUrlForRestaurant(restaurant);\r\n  const picture = document.createElement('picture');\r\n  picture.className = 'restaurant-img';\r\n  picture.setAttribute('aria-labelledby', `picture_${restaurant.id}`);\r\n  picture.setAttribute('role', 'img');\r\n\r\n  const sourceSmall = document.createElement('source');\r\n  sourceSmall.setAttribute('media', '(max-width:480px)');\r\n  sourceSmall.setAttribute('srcset', `${img}-380_small.jpg`);\r\n  picture.append(sourceSmall);\r\n\r\n  const sourceMedium = document.createElement('source');\r\n  sourceMedium.setAttribute('media', '(min-width: 480px) and (max-width: 960px)');\r\n  sourceMedium.setAttribute('srcset', `${img}-512_medium.jpg`);\r\n  picture.append(sourceMedium);\r\n\r\n  const sourceLarge = document.createElement('source');\r\n  sourceLarge.setAttribute('media', '(min-width:961px)');\r\n  sourceLarge.setAttribute('srcset', `${img}-800_large.jpg`);\r\n  picture.append(sourceLarge);\r\n\r\n  const image = document.createElement('img');\r\n  image.id = `picture_${restaurant.id}`;\r\n  image.className = 'restaurant-img';\r\n  image.alt = `Picture of ${restaurant.name} restaurant`;\r\n  image.src = `${img}-380_small.jpg`;\r\n\r\n  picture.append(image);\r\n\r\n  li.append(picture);\r\n\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const favorite = document.createElement('div');\r\n  favorite.className = 'fav';\r\n  const link = document.createElement('a');\r\n  link.className = 'favorite';\r\n  link.setAttribute('role', 'button');\r\n  link.setAttribute('tabindex', '0');\r\n  eventListenerFavorite(link, restaurant.id);\r\n\r\n  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n  svg.setAttribute('class','svg-fav');\r\n  svg.setAttribute('viewBox','0 0 576 512');\r\n  svg.setAttribute('aria-labelledby', `title-${restaurant.id} description-${restaurant.id}`);\r\n\r\n  const title = document.createElementNS('http://www.w3.org/2000/svg', \"title\");\r\n  title.setAttribute('id', `title-${restaurant.id}`);\r\n\r\n  const desc = document.createElementNS('http://www.w3.org/2000/svg', \"desc\");\r\n  desc.setAttribute('id', `description-${restaurant.id}`);\r\n  desc.innerHTML = 'Favorite image';\r\n\r\n  const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n  path.setAttribute('class','path-fav');\r\n  path.setAttribute('role','presentation');\r\n\r\n  self.is_favorite = (restaurant.is_favorite == 'true') ? true : false;\r\n  if( self.is_favorite ) {\r\n    link.title = 'Remove favorite';\r\n    link.setAttribute('aria-label', 'Remove favorite');\r\n    link.dataset.favorite = 'remove';\r\n    title.innerHTML = 'Remove favorite';\r\n    path.setAttribute(\"d\",\"M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z\");\r\n  } else {\r\n    link.title = 'Add to favorite';\r\n    link.setAttribute('aria-label', 'Add to favorite');\r\n    link.dataset.favorite = 'add';\r\n    title.innerHTML = 'Add to favorite';\r\n    path.setAttribute(\"d\",\"M528.1 171.5L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6zM388.6 312.3l23.7 138.4L288 385.4l-124.3 65.3 23.7-138.4-100.6-98 139-20.2 62.2-126 62.2 126 139 20.2-100.6 98z\");\r\n  }\r\n\r\n  svg.appendChild(title);\r\n  svg.appendChild(desc);\r\n  svg.appendChild(path);\r\n  link.append(svg);\r\n  favorite.append(link);\r\n  li.append(favorite);\r\n\r\n  const address = document.createElement('p');\r\n  address.innerHTML = restaurant.address;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.setAttribute('class', 'details');\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n\r\n/**\r\n* @description  Depends of resolutions initalize image map or google map.\r\n* @constructor\r\n*/\r\nwindow.initMap = () => {\r\n  if(window.innerWidth < 641) {\r\n    var googleMap = document.getElementById('map');\r\n    googleMap.style.display = 'none';\r\n    displayStaticMap();\r\n    self.staticMap = true;\r\n  } else {\r\n    var imageMap = document.getElementById('static-map');\r\n    imageMap.style.display = 'none';\r\n    displayMap();\r\n    self.staticMap = false;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n* @description  Initialize Google map, called from HTML.\r\n* @constructor\r\n*/\r\ndisplayMap = () => {\r\n  if(self.staticMap === false) {\r\n    return;\r\n  }\r\n  let googleMap = document.getElementById('map');\r\n  googleMap.style.display = 'block';\r\n  self.staticMap = false;\r\n\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  }\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n}\r\n\r\n\r\n/**\r\n* @description  Display Static map at Mobile resolutions.\r\n* @constructor\r\n*/\r\ndisplayStaticMap = () => {\r\n  if(self.staticMap === true) {\r\n    return;\r\n  }\r\n\r\n  let imageMap = document.getElementById('static-map');\r\n  imageMap.style.display = 'block';\r\n\r\n  imageMap.setAttribute('src',`https://maps.googleapis.com/maps/api/staticmap?center=40.722216,-73.987501&zoom=12&size=${window.innerWidth}x400&format=jpg&maptype=roadmap&markers=color:red`);\r\n  self.staticMap = true;\r\n\r\n  imageMap.addEventListener('click',function(e) {\r\n    e.preventDefault();\r\n    imageMap.style.display ='none';\r\n    displayMap();\r\n  });\r\n}\r\n\r\n\r\n/**\r\n* @description Add markers for current restaurants to the map.\r\n* @constructor\r\n* @param {object} restaurants - restaurants list.\r\n*/\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @description Calls click event of favorite/unfavorite button.\r\n * @constructor\r\n * @param {integer} id - restaurant identifier.\r\n * @param {object} link  - Link to add the event listener.\r\n */\r\n eventListenerFavorite = (link, id) => {\r\n   link.addEventListener('click', function(e) {\r\n     event.preventDefault();\r\n     self.is_favorite = (this.dataset.favorite == 'add') ? true : false;\r\n     DBHelper.putFavorite(id, self.is_favorite, (error, result) => {\r\n       if (!result) {\r\n         console.error(error);\r\n       }\r\n       self.restaurants.forEach(restaurant => {\r\n         if( restaurant.id == id ) {\r\n           restaurant.is_favorite = self.is_favorite ? 'true' : 'false';\r\n         }\r\n       });\r\n\r\n       if( self.is_favorite ) {\r\n         link.title = 'Remove favorite';\r\n         link.setAttribute('aria-label', 'Remove favorite');\r\n         link.dataset.favorite = 'remove';\r\n         link.getElementsByTagName('title')[0].innerHTML = 'Remove favorite';\r\n         link.getElementsByTagName('path')[0].setAttribute(\"d\",\"M259.3 17.8L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0z\");\r\n       } else {\r\n         link.title = 'Add to favorite';\r\n         link.setAttribute('aria-label', 'Add to favorite');\r\n         link.dataset.favorite = 'add';\r\n         link.getElementsByTagName('title')[0].innerHTML = 'Add to favorite';\r\n         link.getElementsByTagName('path')[0].setAttribute(\"d\",\"M528.1 171.5L382 150.2 316.7 17.8c-11.7-23.6-45.6-23.9-57.4 0L194 150.2 47.9 171.5c-26.2 3.8-36.7 36.1-17.7 54.6l105.7 103-25 145.5c-4.5 26.3 23.2 46 46.4 33.7L288 439.6l130.7 68.7c23.2 12.2 50.9-7.4 46.4-33.7l-25-145.5 105.7-103c19-18.5 8.5-50.8-17.7-54.6zM388.6 312.3l23.7 138.4L288 385.4l-124.3 65.3 23.7-138.4-100.6-98 139-20.2 62.2-126 62.2 126 139 20.2-100.6 98z\");\r\n       }\r\n     });\r\n   });\r\n }\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}