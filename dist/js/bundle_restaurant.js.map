{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/idb/lib/idb.js","resources/js/dbhelper.js","resources/js/restaurant_info.js"],"names":[],"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","file":"bundle_restaurant.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","const idb = require('idb');\r\nconst IDB_DB = 'restaurant-db';\r\nconst IDB_OBJECT = 'restaurants';\r\n\r\n /**\r\n  * @description  Common database helper functions.\r\n  * @constructor\r\n  */\r\nclass DBHelper {\r\n /**\r\n  * @description  Database URL. Change this to restaurants.json file location on your server.\r\n  * @constructor\r\n  */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Open database.\r\n   * @constructor\r\n   */\r\n  static openIndexedDB() {\r\n    // If the browser doesn't support service worker,\r\n    // we don't care about having a database\r\n    if (!navigator.serviceWorker) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this.dbPromise = idb.open(IDB_DB, 1, function (upgradeDb) {\r\n      switch (upgradeDb.oldVersion) {\r\n        case 0:\r\n        case 1:\r\n          const store = upgradeDb.createObjectStore(IDB_OBJECT, {\r\n            keyPath: 'id'\r\n          });\r\n          store.createIndex('by-id', 'id');\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Save data restaurant.\r\n   * @constructor\r\n   * @param {object} restaurant - Restaurant object.\r\n   */\r\n  static storeIndexedDB(restaurants) {\r\n    this.dbPromise.then(function (db) {\r\n      if(!db) return;\r\n      let tx = db.transaction(IDB_OBJECT, 'readwrite');\r\n      const store = tx.objectStore(IDB_OBJECT);\r\n      restaurants.forEach(function(restaurant){\r\n        store.put(restaurant);\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Get all restaurants from indexedDB.\r\n   * @constructor\r\n   */\r\n  static getStoredRestaurants() {\r\n    return this.dbPromise.then(function(db) {\r\n      if(!db) return;\r\n      const store = db.transaction(IDB_OBJECT).objectStore(IDB_OBJECT);\r\n      return store.getAll();\r\n    })\r\n  }\r\n\r\n\r\n  /**\r\n   * @description  Get all restaurants from indexedDB.\r\n   * @constructor\r\n   */\r\n  static getStoredRestaurant(id) {\r\n    return this.dbPromise.then(function(db) {\r\n      if(!db) return;\r\n      const store = db.transaction(IDB_OBJECT).objectStore(IDB_OBJECT);\r\n      const indexId = store.index('id');\r\n      return indexId.getAll(id);\r\n    })\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all restaurants.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurants(callback) {\r\n    fetch(DBHelper.DATABASE_URL)\r\n      .then(response => response.json())\r\n      .then(restaurants => {\r\n        DBHelper.storeIndexedDB(restaurants);\r\n        callback(null, restaurants);\r\n      })\r\n      .catch(error => {\r\n        DBHelper.getStoredRestaurants()\r\n        .then((storedRestaurants) => {\r\n          callback(null, storedRestaurants);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch a restaurant by its ID.\r\n  * @constructor\r\n  * @param {int} id - Restaurant identifier.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantById(id, callback) {\r\n    fetch(`${DBHelper.DATABASE_URL}/${id}`)\r\n      .then(response => response.json())\r\n      .then(restaruant => callback(null, restaruant))\r\n      .catch(error => {\r\n        DBHelper.getStoredRestaurant(id)\r\n        .then((storedRestaurant) => {\r\n          callback(null, storedRestaurant);\r\n        }).catch(error => {\r\n          callback(error, null);\r\n        })\r\n      });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a cuisine type with proper error handling.\r\n  * @constructor\r\n  * @param {string} cuisine - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a neighborhood with proper error handling.\r\n  * @constructor\r\n  * @param {string} neighborhood - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n  * @constructor\r\n  * @param {string} cuisine - Cuisine selected.\r\n  * @param {string} neighborhood - Neighborhood selected.\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all neighborhoods with proper error handling.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Fetch all cuisines with proper error handling.\r\n  * @constructor\r\n  * @param {function} callback - Callback function.\r\n  */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n /**\r\n  * @description  Restaurant page URL.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant information.\r\n  */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n\r\n /**\r\n  * @description Restaurant image URL.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant information.\r\n  */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    let photograph = ('photograph' in restaurant) ? restaurant.photograph : restaurant.id;\r\n    return (`/dist/img/${photograph}`);\r\n  }\r\n\r\n\r\n /**\r\n  * @description Map marker for a restaurant.\r\n  * @constructor\r\n  * @param {object} restaurant - Restaurant coords and name.\r\n  * @param {object} map - Google map object.\r\n  */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  }\r\n\r\n\r\n /**\r\n  * @description Register ServiceWorker.\r\n  * @constructor\r\n  */\r\n  static registerServiceWorker() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.register('sw.js')\r\n        .then((reg) => {\r\n          console.log(`Service Worker registration successful. Its scope is ${reg.scope} `);\r\n        }).catch((error) => {\r\n          console.log(`Service Worker registration error: ${error}`);\r\n        });\r\n    }\r\n  }\r\n\r\n\r\n\r\n}\r\nmodule.exports = DBHelper;\r\n","const DBHelper = require('./dbhelper');\n\nlet restaurant;\nvar map;\n\n/**\n  * @description Call functions when DOM content is loaded\n  * @constructor\n  * @param {string} DOMContentLoaded - String detected.\n  * @param {event} event - Event called\n  */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  DBHelper.registerServiceWorker();\n  DBHelper.openIndexedDB();\n});\n\n\n/**\n * @description Initialize Google map, called from HTML.\n * @constructor\n */\nwindow.initMap = () => {\n  fetchRestaurantFromURL((error, restaurant) => {\n    if (error) { // Got an error!\n      console.error(error);\n    } else {\n      self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 16,\n        center: restaurant.latlng,\n        scrollwheel: false\n      });\n      fillBreadcrumb();\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\n    }\n  });\n}\n\n\n/**\n  * @description Get current restaurant from page URL.\n  * @constructor\n  * @param {callback} callback - Callback returned.\n  */\nfetchRestaurantFromURL = (callback) => {\n  if (self.restaurant) { // restaurant already fetched!\n    callback(null, self.restaurant)\n    return;\n  }\n  const id = getParameterByName('id');\n  if (!id) { // no id found in URL\n    error = 'No restaurant id in URL'\n    callback(error, null);\n  } else {\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\n      self.restaurant = restaurant;\n      if (!restaurant) {\n        console.error(error);\n        return;\n      }\n      fillRestaurantHTML();\n      callback(null, restaurant)\n    });\n  }\n}\n\n\n/**\n * @description Create restaurant HTML and add it to the webpage.\n * @constructor\n * @param {object} restaurant - All restaurant info.\n */\nfillRestaurantHTML = (restaurant = self.restaurant) => {\n  const name = document.getElementById('restaurant-name');\n  name.innerHTML = restaurant.name;\n\n  const address = document.getElementById('restaurant-address');\n  address.innerHTML = restaurant.address;\n  \n  const img = DBHelper.imageUrlForRestaurant(restaurant);\n  const picture = document.getElementById('restaurant-picture');\n  picture.className = 'restaurant-img';\n  picture.setAttribute('aria-labelledby', `restaurant-img`);\n  picture.setAttribute('role', 'img');\n\n  const sourceSmall = document.createElement('source');\n  sourceSmall.setAttribute('media', '(max-width:480px)');\n  sourceSmall.setAttribute('srcset', `${img}-380_small.jpg`);\n  picture.append(sourceSmall);\n\n  const sourceMedium = document.createElement('source');\n  sourceMedium.setAttribute('media', '(min-width: 480px) and (max-width: 960px)');\n  sourceMedium.setAttribute('srcset', `${img}-512_medium.jpg`);\n  picture.append(sourceMedium);\n\n  const sourceLarge = document.createElement('source');\n  sourceLarge.setAttribute('media', '(min-width:961px)');\n  sourceLarge.setAttribute('srcset', `${img}-800_large.jpg`);\n  picture.append(sourceLarge);\n\n  const image = document.getElementById('restaurant-img');\n  image.className = 'restaurant-img';\n  image.alt = `Picture of ${restaurant.name} restaurant`;\n  image.src = `${img}-380_small.jpg`;\n\n  picture.append(image);\n\n  const cuisine = document.getElementById('restaurant-cuisine');\n  cuisine.innerHTML = restaurant.cuisine_type;\n\n  // fill operating hours\n  if (restaurant.operating_hours) {\n    fillRestaurantHoursHTML();\n  }\n  // fill reviews\n  fillReviewsHTML();\n}\n\n\n/**\n  * @description Create restaurant operating hours HTML table and add it to the webpage.\n  * @constructor\n  * @param {object} operatingHours - All restaurant operating hours.\n  */\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n  const hours = document.getElementById('restaurant-hours');\n  for (let key in operatingHours) {\n    const row = document.createElement('tr');\n\n    const day = document.createElement('td');\n    day.innerHTML = key;\n    row.appendChild(day);\n\n    const time = document.createElement('td');\n    time.innerHTML = operatingHours[key];\n    row.appendChild(time);\n\n    hours.appendChild(row);\n  }\n}\n\n\n/**\n * @description Create all reviews HTML and add them to the webpage.\n * @constructor\n * @param {object} reviews - All reviews related to a restaurant.\n */\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\n  const container = document.getElementById('reviews-container');\n  const title = document.createElement('h3');\n  title.innerHTML = 'Reviews';\n  container.appendChild(title);\n\n  if (!reviews) {\n    const noReviews = document.createElement('p');\n    noReviews.innerHTML = 'No reviews yet!';\n    container.appendChild(noReviews);\n    return;\n  }\n  const ul = document.getElementById('reviews-list');\n  reviews.forEach(review => {\n    ul.appendChild(createReviewHTML(review));\n  });\n  container.appendChild(ul);\n}\n\n\n/**\n * @description Create review HTML and add it to the webpage.\n * @constructor\n * @param {object} review - One reveiw from a restaurant.\n */\ncreateReviewHTML = (review) => {\n  const li = document.createElement('li');\n  const name = document.createElement('p');\n  name.innerHTML = review.name;\n  li.appendChild(name);\n\n  const date = document.createElement('p');\n  date.innerHTML = review.date;\n  li.appendChild(date);\n\n  const rating = document.createElement('p');\n  rating.innerHTML = `Rating: ${review.rating}`;\n  li.appendChild(rating);\n\n  const comments = document.createElement('p');\n  comments.innerHTML = review.comments;\n  li.appendChild(comments);\n\n  return li;\n}\n\n\n/**\n * @description Add restaurant name to the breadcrumb navigation menu.\n * @constructor\n * @param {object} restaurant - Restaurant information.\n */\nfillBreadcrumb = (restaurant=self.restaurant) => {\n  const breadcrumb = document.getElementById('breadcrumb');\n  const li = document.createElement('li');\n  li.innerHTML = restaurant.name;\n  breadcrumb.appendChild(li);\n}\n\n/**\n * @description Get a parameter by name from page URL.\n * @constructor\n * @param {string} name - parameter name\n * @param {string} url - url requested\n */\ngetParameterByName = (name, url) => {\n  if (!url)\n    url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\n    results = regex.exec(url);\n  if (!results)\n    return null;\n  if (!results[2])\n    return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}